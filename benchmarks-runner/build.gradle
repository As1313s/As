
/*
 * Copyright 2016-2019 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.30'
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://dl.bintray.com/orangy/maven' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation 'org.openjdk.jmh:jmh-core:1.21'
    implementation 'org.jetbrains.kotlinx:kotlinx-cli-jvm:0.1.0-dev-4'
    
    runtimeOnly project(path: ':kotlinx-collections-immutable')
}

task copyBenchmarkList(type: Copy, dependsOn: ':benchmarks-mpp:jvmBenchmarkGenerate', group: "Benchmark") {
    from "${project(':benchmarks-mpp').buildDir}/benchmarks/jvm/resources"
    into sourceSets.main.output.resourcesDir
}

// map
task benchmarkHashMap(type: JavaExec, group: "Benchmark") {
    main = 'runners.HashMapRunnerKt'
}

task benchmarkHashMapBuilder(type: JavaExec, group: "Benchmark") {
    main = 'runners.HashMapBuilderRunnerKt'
}

task benchmarkOrderedMap(type: JavaExec, group: "Benchmark") {
    main = 'runners.OrderedMapRunnerKt'
}

task benchmarkOrderedMapBuilder(type: JavaExec, group: "Benchmark") {
    main = 'runners.OrderedMapBuilderRunnerKt'
}

task benchmarkAllMaps(group: "Benchmark") {
    dependsOn benchmarkHashMap
    dependsOn benchmarkHashMapBuilder
    dependsOn benchmarkOrderedMap
    dependsOn benchmarkOrderedMapBuilder
}

// set
task benchmarkHashSet(type: JavaExec, group: "Benchmark") {
    main = 'runners.HashSetRunnerKt'
}

task benchmarkHashSetBuilder(type: JavaExec, group: "Benchmark") {
    main = 'runners.HashSetBuilderRunnerKt'
}

task benchmarkOrderedSet(type: JavaExec, group: "Benchmark") {
    main = 'runners.OrderedSetRunnerKt'
}

task benchmarkOrderedSetBuilder(type: JavaExec, group: "Benchmark") {
    main = 'runners.OrderedSetBuilderRunnerKt'
}

task benchmarkAllSets(group: "Benchmark") {
    dependsOn benchmarkHashSet
    dependsOn benchmarkHashSetBuilder
    dependsOn benchmarkOrderedSet
    dependsOn benchmarkOrderedSetBuilder
}

// list
task benchmarkList(type: JavaExec, group: "Benchmark") {
    main = 'runners.ListRunnerKt'
}

task benchmarkListBuilder(type: JavaExec, group: "Benchmark") {
    main = 'runners.ListBuilderRunnerKt'
}

task benchmarkAllLists(group: "Benchmark") {
    dependsOn benchmarkList
    dependsOn benchmarkListBuilder
}

// all
task benchmarkAll(group: "Benchmark") {
    dependsOn benchmarkAllMaps
    dependsOn benchmarkAllSets
    dependsOn benchmarkAllLists
}


// configure runner tasks

def jmhParams = [
        'remote':'remote',
        'f':'forks',
        'i':'measurementIterations', 
        'r':'measurementTime', 
        'wi':'warmupIterations', 
        'w':'warmupTime',
//        'e':'exclude',
//        'incl':'include',
        'size':'size',
        'hashCodeType':'hashCodeType',
        'immutablePercentage':'immutablePercentage'
]

tasks.withType(JavaExec) {
    if (group == "Benchmark") {
        dependsOn copyBenchmarkList
        dependsOn ':benchmarks-mpp:jvmBenchmarkCompile'

        classpath = sourceSets.main.runtimeClasspath
        classpath += files("../benchmarks-mpp/build/benchmarks/jvm/classes")
        classpath += files("../benchmarks-mpp/build/classes/kotlin/jvm/main")
        
        jmhParams.forEach { commandLineParam, envParam ->
            if (project.hasProperty(commandLineParam)) {
                environment(envParam, project.property(commandLineParam))
            }
        }
    }
}