
/*
 * Copyright 2016-2019 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.30'
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://dl.bintray.com/orangy/maven' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation 'org.openjdk.jmh:jmh-core:1.21'
    implementation 'org.jetbrains.kotlinx:kotlinx-cli-jvm:0.1.0-dev-4'
    
    runtimeOnly project(path: ':kotlinx-collections-immutable')
}

task copyKotlinBenchmarkList(type: Copy, dependsOn: ':benchmarks-mpp:jvmBenchmarkGenerate', group: "kotlinBenchmark") {
    from "${project(':benchmarks-mpp').buildDir}/benchmarks/jvm/resources"
    into sourceSets.main.output.resourcesDir
}

// map
task benchmarkKotlinHashMap(type: JavaExec, group: "kotlinBenchmark") {
    main = 'HashMapBenchmarkerKt'
}

task benchmarkKotlinHashMapBuilder(type: JavaExec, group: "kotlinBenchmark") {
    main = 'HashMapBuilderBenchmarkerKt'
}

task benchmarkKotlinOrderedMap(type: JavaExec, group: "kotlinBenchmark") {
    main = 'OrderedMapBenchmarkerKt'
}

task benchmarkKotlinOrderedMapBuilder(type: JavaExec, group: "kotlinBenchmark") {
    main = 'OrderedMapBuilderBenchmarkerKt'
}

task benchmarkKotlinAllMaps(group: "kotlinBenchmark") {
    dependsOn benchmarkKotlinHashMap
    dependsOn benchmarkKotlinHashMapBuilder
    dependsOn benchmarkKotlinOrderedMap
    dependsOn benchmarkKotlinOrderedMapBuilder
}

// set
task benchmarkKotlinHashSet(type: JavaExec, group: "kotlinBenchmark") {
    main = 'HashSetBenchmarkerKt'
}

task benchmarkKotlinHashSetBuilder(type: JavaExec, group: "kotlinBenchmark") {
    main = 'HashSetBuilderBenchmarkerKt'
}

task benchmarkKotlinOrderedSet(type: JavaExec, group: "kotlinBenchmark") {
    main = 'OrderedSetBenchmarkerKt'
}

task benchmarkKotlinOrderedSetBuilder(type: JavaExec, group: "kotlinBenchmark") {
    main = 'OrderedSetBuilderBenchmarkerKt'
}

task benchmarkKotlinAllSets(group: "kotlinBenchmark") {
    dependsOn benchmarkKotlinHashSet
    dependsOn benchmarkKotlinHashSetBuilder
    dependsOn benchmarkKotlinOrderedSet
    dependsOn benchmarkKotlinOrderedSetBuilder
}

// list
task benchmarkKotlinList(type: JavaExec, group: "kotlinBenchmark") {
    main = 'ListBenchmarkerKt'
}

task benchmarkKotlinListBuilder(type: JavaExec, group: "kotlinBenchmark") {
    main = 'ListBuilderBenchmarkerKt'
}

task benchmarkKotlinAllLists(group: "kotlinBenchmark") {
    dependsOn benchmarkKotlinList
    dependsOn benchmarkKotlinListBuilder
}

// all
task benchmarkKotlinAll(group: "kotlinBenchmark") {
    dependsOn benchmarkKotlinAllMaps
    dependsOn benchmarkKotlinAllSets
    dependsOn benchmarkKotlinAllLists
}


// configure runner tasks
tasks.withType(JavaExec) {
    if (group == "kotlinBenchmark") {
        dependsOn copyKotlinBenchmarkList
        dependsOn ':benchmarks-mpp:jvmBenchmarkCompile'

        classpath = sourceSets.main.runtimeClasspath
        classpath += files("../benchmarks-mpp/build/benchmarks/jvm/classes")
        classpath += files("../benchmarks-mpp/build/classes/kotlin/jvm/main")
    }
}